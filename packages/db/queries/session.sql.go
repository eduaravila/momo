// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: session.sql

package queries

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (id, user_id, created_at, expired_at, session_token, ip_address, user_agent, is_valid) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id, user_id, created_at, expired_at, session_token, ip_address, user_agent, is_valid
`

type CreateSessionParams struct {
	ID           uuid.UUID
	UserID       uuid.UUID
	CreatedAt    time.Time
	ExpiredAt    time.Time
	SessionToken string
	IpAddress    string
	UserAgent    string
	IsValid      bool
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.ID,
		arg.UserID,
		arg.CreatedAt,
		arg.ExpiredAt,
		arg.SessionToken,
		arg.IpAddress,
		arg.UserAgent,
		arg.IsValid,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiredAt,
		&i.SessionToken,
		&i.IpAddress,
		&i.UserAgent,
		&i.IsValid,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, created_at, expired_at, session_token, ip_address, user_agent, is_valid FROM sessions WHERE id = $1
`

func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiredAt,
		&i.SessionToken,
		&i.IpAddress,
		&i.UserAgent,
		&i.IsValid,
	)
	return i, err
}

const invalidateSession = `-- name: InvalidateSession :exec
UPDATE sessions SET is_valid = false WHERE id = $1
`

func (q *Queries) InvalidateSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, invalidateSession, id)
	return err
}
