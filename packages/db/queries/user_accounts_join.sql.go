// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user_accounts_join.sql

package queries

import (
	"context"

	"github.com/google/uuid"
)

const countUserAccountsJoins = `-- name: CountUserAccountsJoins :one
SELECT COUNT(*) FROM user_accounts_join
`

func (q *Queries) CountUserAccountsJoins(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUserAccountsJoins)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUserAccountsJoin = `-- name: CreateUserAccountsJoin :one
INSERT INTO user_accounts_join (user_id, account_id, account_manage_id, role_id) VALUES ($1, $2, $3, $4) on conflict (user_id, account_id) do nothing RETURNING user_id, account_id, account_manage_id, role_id
`

type CreateUserAccountsJoinParams struct {
	UserID          uuid.UUID
	AccountID       uuid.UUID
	AccountManageID uuid.UUID
	RoleID          int32
}

func (q *Queries) CreateUserAccountsJoin(ctx context.Context, arg CreateUserAccountsJoinParams) (UserAccountsJoin, error) {
	row := q.db.QueryRowContext(ctx, createUserAccountsJoin,
		arg.UserID,
		arg.AccountID,
		arg.AccountManageID,
		arg.RoleID,
	)
	var i UserAccountsJoin
	err := row.Scan(
		&i.UserID,
		&i.AccountID,
		&i.AccountManageID,
		&i.RoleID,
	)
	return i, err
}

const deleteUserAccountsJoin = `-- name: DeleteUserAccountsJoin :exec
DELETE FROM user_accounts_join WHERE user_id = $1 AND account_id = $2
`

type DeleteUserAccountsJoinParams struct {
	UserID    uuid.UUID
	AccountID uuid.UUID
}

func (q *Queries) DeleteUserAccountsJoin(ctx context.Context, arg DeleteUserAccountsJoinParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserAccountsJoin, arg.UserID, arg.AccountID)
	return err
}

const getUserAccountsJoin = `-- name: GetUserAccountsJoin :one
SELECT user_id, account_id, account_manage_id, role_id FROM user_accounts_join WHERE user_id = $1 AND account_id = $2
`

type GetUserAccountsJoinParams struct {
	UserID    uuid.UUID
	AccountID uuid.UUID
}

func (q *Queries) GetUserAccountsJoin(ctx context.Context, arg GetUserAccountsJoinParams) (UserAccountsJoin, error) {
	row := q.db.QueryRowContext(ctx, getUserAccountsJoin, arg.UserID, arg.AccountID)
	var i UserAccountsJoin
	err := row.Scan(
		&i.UserID,
		&i.AccountID,
		&i.AccountManageID,
		&i.RoleID,
	)
	return i, err
}

const getUserAccountsJoinByAccountID = `-- name: GetUserAccountsJoinByAccountID :many
SELECT user_id, account_id, account_manage_id, role_id FROM user_accounts_join WHERE account_id = $1
`

func (q *Queries) GetUserAccountsJoinByAccountID(ctx context.Context, accountID uuid.UUID) ([]UserAccountsJoin, error) {
	rows, err := q.db.QueryContext(ctx, getUserAccountsJoinByAccountID, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserAccountsJoin
	for rows.Next() {
		var i UserAccountsJoin
		if err := rows.Scan(
			&i.UserID,
			&i.AccountID,
			&i.AccountManageID,
			&i.RoleID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserAccountsJoinByAccountManageID = `-- name: GetUserAccountsJoinByAccountManageID :many
SELECT user_id, account_id, account_manage_id, role_id FROM user_accounts_join WHERE account_manage_id = $1
`

func (q *Queries) GetUserAccountsJoinByAccountManageID(ctx context.Context, accountManageID uuid.UUID) ([]UserAccountsJoin, error) {
	rows, err := q.db.QueryContext(ctx, getUserAccountsJoinByAccountManageID, accountManageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserAccountsJoin
	for rows.Next() {
		var i UserAccountsJoin
		if err := rows.Scan(
			&i.UserID,
			&i.AccountID,
			&i.AccountManageID,
			&i.RoleID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserAccountsJoinByRoleID = `-- name: GetUserAccountsJoinByRoleID :many
SELECT user_id, account_id, account_manage_id, role_id FROM user_accounts_join WHERE role_id = $1
`

func (q *Queries) GetUserAccountsJoinByRoleID(ctx context.Context, roleID int32) ([]UserAccountsJoin, error) {
	rows, err := q.db.QueryContext(ctx, getUserAccountsJoinByRoleID, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserAccountsJoin
	for rows.Next() {
		var i UserAccountsJoin
		if err := rows.Scan(
			&i.UserID,
			&i.AccountID,
			&i.AccountManageID,
			&i.RoleID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserAccountsJoinByUserID = `-- name: GetUserAccountsJoinByUserID :many
SELECT user_id, account_id, account_manage_id, role_id FROM user_accounts_join WHERE user_id = $1
`

func (q *Queries) GetUserAccountsJoinByUserID(ctx context.Context, userID uuid.UUID) ([]UserAccountsJoin, error) {
	rows, err := q.db.QueryContext(ctx, getUserAccountsJoinByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserAccountsJoin
	for rows.Next() {
		var i UserAccountsJoin
		if err := rows.Scan(
			&i.UserID,
			&i.AccountID,
			&i.AccountManageID,
			&i.RoleID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserAccountsJoins = `-- name: ListUserAccountsJoins :many
SELECT user_id, account_id, account_manage_id, role_id FROM user_accounts_join
`

func (q *Queries) ListUserAccountsJoins(ctx context.Context) ([]UserAccountsJoin, error) {
	rows, err := q.db.QueryContext(ctx, listUserAccountsJoins)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserAccountsJoin
	for rows.Next() {
		var i UserAccountsJoin
		if err := rows.Scan(
			&i.UserID,
			&i.AccountID,
			&i.AccountManageID,
			&i.RoleID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserAccountsJoin = `-- name: UpdateUserAccountsJoin :exec
UPDATE user_accounts_join SET updated_at = now() WHERE user_id = $1 AND account_id = $2
`

type UpdateUserAccountsJoinParams struct {
	UserID    uuid.UUID
	AccountID uuid.UUID
}

func (q *Queries) UpdateUserAccountsJoin(ctx context.Context, arg UpdateUserAccountsJoinParams) error {
	_, err := q.db.ExecContext(ctx, updateUserAccountsJoin, arg.UserID, arg.AccountID)
	return err
}
