// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user.sql

package queries

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO
    users (
        id,
        name,
        created_at,
        picture,
        prefered_username,
        updated_at
    )
VALUES
    ($1, $2, $3, $4, $5, $6) RETURNING id
`

type CreateUserParams struct {
	ID               uuid.UUID
	Name             string
	CreatedAt        time.Time
	Picture          string
	PreferedUsername string
	UpdatedAt        time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.CreatedAt,
		arg.Picture,
		arg.PreferedUsername,
		arg.UpdatedAt,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM
    users
WHERE
    id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT
    id,
    name,
    created_at,
    picture,
    prefered_username,
    updated_at
FROM
    users
WHERE
    id = $1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.Picture,
		&i.PreferedUsername,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT
    id,
    name,
    created_at,
    picture,
    prefered_username,
    updated_at
FROM
    users
ORDER BY
    created_at DESC
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.Picture,
			&i.PreferedUsername,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE
    users
SET
    name = $2,
    created_at = $3,
    picture = $4,
    prefered_username = $5,
    updated_at = $6
WHERE
    id = $1
`

type UpdateUserParams struct {
	ID               uuid.UUID
	Name             string
	CreatedAt        time.Time
	Picture          string
	PreferedUsername string
	UpdatedAt        time.Time
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.CreatedAt,
		arg.Picture,
		arg.PreferedUsername,
		arg.UpdatedAt,
	)
	return err
}
