// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: accounts.sql

package queries

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const accountExistByEmail = `-- name: AccountExistByEmail :one
SELECT EXISTS (SELECT 1 FROM accounts WHERE email = $1)
`

func (q *Queries) AccountExistByEmail(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, accountExistByEmail, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const accountExistById = `-- name: AccountExistById :one
SELECT EXISTS (SELECT 1 FROM accounts WHERE id = $1)
`

func (q *Queries) AccountExistById(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, accountExistById, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const accountExistBySub = `-- name: AccountExistBySub :one
SELECT EXISTS (SELECT 1 FROM accounts WHERE sub = $1)
`

func (q *Queries) AccountExistBySub(ctx context.Context, sub string) (bool, error) {
	row := q.db.QueryRowContext(ctx, accountExistBySub, sub)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const countAccounts = `-- name: CountAccounts :one
SELECT COUNT(*) FROM accounts
`

func (q *Queries) CountAccounts(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAccounts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (id, user_id, picture, email, prefered_username, access_token, refresh_token, iss, sub, expired_at, scope) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) ON CONFLICT (sub) DO UPDATE SET user_id = $2, picture = $3, email = $4, prefered_username = $5, access_token = $6, refresh_token = $7, iss = $8, sub = $9, expired_at = $10, scope = $11 
RETURNING id, user_id, picture, email, prefered_username, access_token, refresh_token, iss, sub, created_at, updated_at, expired_at, scope
`

type CreateAccountParams struct {
	ID               uuid.UUID
	UserID           uuid.UUID
	Picture          string
	Email            string
	PreferedUsername string
	AccessToken      string
	RefreshToken     string
	Iss              string
	Sub              string
	ExpiredAt        time.Time
	Scope            string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.ID,
		arg.UserID,
		arg.Picture,
		arg.Email,
		arg.PreferedUsername,
		arg.AccessToken,
		arg.RefreshToken,
		arg.Iss,
		arg.Sub,
		arg.ExpiredAt,
		arg.Scope,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Picture,
		&i.Email,
		&i.PreferedUsername,
		&i.AccessToken,
		&i.RefreshToken,
		&i.Iss,
		&i.Sub,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiredAt,
		&i.Scope,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, user_id, picture, email, prefered_username, access_token, refresh_token, iss, sub, created_at, updated_at, expired_at, scope FROM accounts WHERE id = $1
`

func (q *Queries) GetAccount(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Picture,
		&i.Email,
		&i.PreferedUsername,
		&i.AccessToken,
		&i.RefreshToken,
		&i.Iss,
		&i.Sub,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiredAt,
		&i.Scope,
	)
	return i, err
}

const getAccountAndUserBySub = `-- name: GetAccountAndUserBySub :one
SELECT accounts.id, user_id, picture, email, prefered_username, access_token, refresh_token, iss, sub, accounts.created_at, accounts.updated_at, expired_at, scope, users.id, users.created_at, users.updated_at FROM accounts INNER JOIN users ON accounts.user_id = users.id WHERE sub = $1
`

type GetAccountAndUserBySubRow struct {
	ID               uuid.UUID
	UserID           uuid.UUID
	Picture          string
	Email            string
	PreferedUsername string
	AccessToken      string
	RefreshToken     string
	Iss              string
	Sub              string
	CreatedAt        time.Time
	UpdatedAt        time.Time
	ExpiredAt        time.Time
	Scope            string
	ID_2             uuid.UUID
	CreatedAt_2      time.Time
	UpdatedAt_2      time.Time
}

func (q *Queries) GetAccountAndUserBySub(ctx context.Context, sub string) (GetAccountAndUserBySubRow, error) {
	row := q.db.QueryRowContext(ctx, getAccountAndUserBySub, sub)
	var i GetAccountAndUserBySubRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Picture,
		&i.Email,
		&i.PreferedUsername,
		&i.AccessToken,
		&i.RefreshToken,
		&i.Iss,
		&i.Sub,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiredAt,
		&i.Scope,
		&i.ID_2,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
	)
	return i, err
}

const getAccountBySub = `-- name: GetAccountBySub :one
SELECT id, user_id, picture, email, prefered_username, access_token, refresh_token, iss, sub, created_at, updated_at, expired_at, scope FROM accounts WHERE sub = $1
`

func (q *Queries) GetAccountBySub(ctx context.Context, sub string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountBySub, sub)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Picture,
		&i.Email,
		&i.PreferedUsername,
		&i.AccessToken,
		&i.RefreshToken,
		&i.Iss,
		&i.Sub,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiredAt,
		&i.Scope,
	)
	return i, err
}

const getAccountsByIDs = `-- name: GetAccountsByIDs :many
SELECT id, user_id, picture, email, prefered_username, access_token, refresh_token, iss, sub, created_at, updated_at, expired_at, scope FROM accounts WHERE id = ANY($1)
`

func (q *Queries) GetAccountsByIDs(ctx context.Context, id uuid.UUID) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, getAccountsByIDs, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Picture,
			&i.Email,
			&i.PreferedUsername,
			&i.AccessToken,
			&i.RefreshToken,
			&i.Iss,
			&i.Sub,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExpiredAt,
			&i.Scope,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAccountsByISS = `-- name: GetAccountsByISS :many
SELECT id, user_id, picture, email, prefered_username, access_token, refresh_token, iss, sub, created_at, updated_at, expired_at, scope FROM accounts WHERE iss = $1
`

func (q *Queries) GetAccountsByISS(ctx context.Context, iss string) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, getAccountsByISS, iss)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Picture,
			&i.Email,
			&i.PreferedUsername,
			&i.AccessToken,
			&i.RefreshToken,
			&i.Iss,
			&i.Sub,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExpiredAt,
			&i.Scope,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAccountsBySub = `-- name: GetAccountsBySub :one
SELECT id, user_id, picture, email, prefered_username, access_token, refresh_token, iss, sub, created_at, updated_at, expired_at, scope FROM accounts WHERE sub = $1
`

func (q *Queries) GetAccountsBySub(ctx context.Context, sub string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountsBySub, sub)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Picture,
		&i.Email,
		&i.PreferedUsername,
		&i.AccessToken,
		&i.RefreshToken,
		&i.Iss,
		&i.Sub,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiredAt,
		&i.Scope,
	)
	return i, err
}

const getAccountsByUserID = `-- name: GetAccountsByUserID :many
SELECT id, user_id, picture, email, prefered_username, access_token, refresh_token, iss, sub, created_at, updated_at, expired_at, scope FROM accounts WHERE user_id = $1
`

func (q *Queries) GetAccountsByUserID(ctx context.Context, userID uuid.UUID) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, getAccountsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Picture,
			&i.Email,
			&i.PreferedUsername,
			&i.AccessToken,
			&i.RefreshToken,
			&i.Iss,
			&i.Sub,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExpiredAt,
			&i.Scope,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserBySub = `-- name: GetUserBySub :one
SELECT id, created_at, updated_at FROM users WHERE id = (SELECT user_id FROM accounts WHERE sub = $1)
`

func (q *Queries) GetUserBySub(ctx context.Context, sub string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserBySub, sub)
	var i User
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, user_id, picture, email, prefered_username, access_token, refresh_token, iss, sub, created_at, updated_at, expired_at, scope FROM accounts
`

func (q *Queries) ListAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Picture,
			&i.Email,
			&i.PreferedUsername,
			&i.AccessToken,
			&i.RefreshToken,
			&i.Iss,
			&i.Sub,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExpiredAt,
			&i.Scope,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :exec
UPDATE accounts SET updated_at = now() WHERE id = $1
`

func (q *Queries) UpdateAccount(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, updateAccount, id)
	return err
}
